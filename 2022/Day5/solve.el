(defun read-file ()
  (split-string (buffer-substring-no-properties (point-min) (point-max)) "\n"))

(defun push-stack (index item)
  (let ((stack (nth index elves-stacks)))
    (push item stack)
    (setq elves-stacks (--update-at index stack elves-stacks))))

(defun pop-stack (index)
  (let* ((stack (nth index elves-stacks))
         (el (pop stack)))
    (setq elves-stacks (--update-at index stack elves-stacks))
    el))

(defun parse-crates (crates)
  (setq-local elves-stacks (make-list 10 (list)))
  (--each (reverse crates)
    (--each (->> (-partition 4 (string-to-list (string-pad it 40)))
                 (--map-indexed (list (+ 1 it-index) (char-to-string (nth 1 it))))
                 (--filter (not (string-equal " " (-last-item it)))))
      (push-stack (-first-item it) (-last-item it)))))

(defun parse-commands (line)
  (--map
   (save-match-data
     (string-match "move \\([0-9]+\\) from \\([0-9]+\\) to \\([0-9]+\\)" it)
     (-map #'string-to-number (list (match-string 1 it)
                                    (match-string 2 it)
                                    (match-string 3 it))))
   line))

(defun solve ()
  (interactive)
  (let* ((lines (read-file))
         (end-crates (-find-index #'string-empty-p lines))
         (crates (-slice lines 0 (- end-crates 1)))
         (lines (-slice lines end-crates)))
    (parse-crates crates)
    (--each (parse-commands (--filter (not (string-empty-p it)) lines))
      (let ((times (-first-item it))
            (from (-second-item it))
            (to (-third-item it)))
        (message "Executing %s" it)
        (--dotimes times (push-stack to (pop-stack from))))))
  (message "Solution 1: %s" (string-join (-map #'car elves-stacks))))

(defun push-stack-many (index items)
  (let ((stack (nth index elves-stacks)))
    (--each items (push it stack))
    (setq elves-stacks (--update-at index stack elves-stacks))))

(defun pop-stack-many (index n)
  (let ((stack (list)))
    (--dotimes n (push (pop-stack index) stack))
    stack))

(defun solve2 ()
  (interactive)
  (let* ((lines (read-file))
         (end-crates (-find-index #'string-empty-p lines))
         (crates (-slice lines 0 (- end-crates 1)))
         (lines (-slice lines end-crates)))
    (parse-crates crates)
    (--each (parse-commands (--filter (not (string-empty-p it)) lines))
      (let ((times (-first-item it))
            (from (-second-item it))
            (to (-third-item it)))
        (message "Executing %s" it)
        (push-stack-many to (pop-stack-many from times)))))
  (message "Solution 2: %s" (string-join (-map #'car elves-stacks))))
