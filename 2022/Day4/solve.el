(defun read-file ()
  (split-string (buffer-substring-no-properties (point-min) (point-max)) "\n" t " "))

(defun solve ()
  (interactive)
  (->> (read-file)
       (--map (-flatten (--map (split-string it "-") (split-string it ","))))
       (--map (-map #'string-to-number it))
       (--filter (or (and (<= (nth 0 it) (nth 2 it)) (>= (nth 1 it) (nth 3 it)))
                     (and (>= (nth 0 it) (nth 2 it)) (<= (nth 1 it) (nth 3 it)))))
       (length)
       (message "Solution 1: %d")))

(defun solve2 ()
  (interactive)
  (->> (read-file)
       (--map (-flatten (--map (split-string it "-") (split-string it ","))))
       (--map (-map #'string-to-number it))
       (--filter (or (and (>= (nth 0 it) (nth 2 it)) (<= (nth 0 it) (nth 3 it)))
                     (and (>= (nth 1 it) (nth 2 it)) (<= (nth 1 it) (nth 3 it)))
                     (and (>= (nth 2 it) (nth 0 it)) (<= (nth 2 it) (nth 1 it)))
                     (and (>= (nth 3 it) (nth 0 it)) (<= (nth 3 it) (nth 1 it)))))
       (length)
       (message "Solution 2: %d")))
